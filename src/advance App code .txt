

import React, { useState } from 'react';
import axios from 'axios';
import jsPDF from 'jspdf';
import logo from "./logo.png";

function App() {
    const [image, setImage] = useState(null);
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const handleImageChange = (e) => {
        setImage(e.target.files[0]);
        setData(null); // Clear previous data
        setError(''); // Clear previous errors
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        const formData = new FormData();
        formData.append('image', image);

        try {
            const response = await axios.post('http://localhost:5000/upload', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data',
                },
            });
            const filteredData = filterData(response.data);
            setData(filteredData);
        } catch (error) {
            console.error('Error during OCR processing:', error);
            setError('Failed to process the image. Please try again.');
        } finally {
            setLoading(false);
        }
    };

    const filterData = (data) => {
        const filtered = {};
        Object.keys(data).forEach(category => {
            filtered[category] = data[category].filter(value => value > 70 && value < 140);
        });
        return filtered;
    };

    const calculateAverage = (values) => {
        if (values.length === 0) return 0;
        const sum = values.reduce((acc, val) => acc + val, 0);
        return (sum / values.length).toFixed(2); // Two decimal places
    };

    const handleDownloadPDF = () => {
        const doc = new jsPDF();
        const averageResults = Object.keys(data).map(category => {
            const values = data[category];
            const average = calculateAverage(values);
            return `${category.charAt(0).toUpperCase() + category.slice(1)} Average: ${average}`;
        });
        
        let y = 10;
        averageResults.forEach((result, index) => {
            doc.text(result, 10, y);
            y += 10;
        });
        doc.save("extracted_data.pdf");
    };

    const handleDownloadTextFile = () => {
        const averageResults = Object.keys(data).map(category => {
            const values = data[category];
            const average = calculateAverage(values);
            return `${category.charAt(0).toUpperCase() + category.slice(1)} Average: ${average}`;
        }).join('\n');

        const element = document.createElement("a");
        const file = new Blob([averageResults], { type: "text/plain" });
        element.href = URL.createObjectURL(file);
        element.download = "extracted_data.txt";
        document.body.appendChild(element); // Required for this to work in FireFox
        element.click();
    };

    const renderData = () => {
        if (!data) return null;

        return (
            <div className="mt-6">
                <h4 className="text-lg font-semibold mb-2">Filtered and Average Results:</h4>
                {Object.keys(data).map(category => {
                    const values = data[category];
                    const average = calculateAverage(values);
                    const colorClass = getCategoryColor(category);
                    return (
                        <div key={category} className={`mb-4 p-4 rounded-md ${colorClass}`}>
                            <h5 className="font-bold">{category.charAt(0).toUpperCase() + category.slice(1)}</h5>
                            <p className="text-sm">Average: {average}</p>
                        </div>
                    );
                })}
            </div>
        );
    };

    const getCategoryColor = (category) => {
        switch (category) {
            case 'normal':
                return 'bg-green-200 text-green-800';
            case 'diabetes':
                return 'bg-red-200 text-red-800';
            case 'lowSugar':
                return 'bg-gray-200 text-gray-800';
            default:
                return '';
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4">
            <div className="w-full max-w-md bg-white rounded-lg shadow-md p-6">
                <div className="text-center mb-6">
                    <img src={logo} alt="Logo" className="mx-auto w-28 mb-2" />
                    <h2 className="text-2xl font-bold">OCR to Text Converter</h2>
                    <h4 className="text-sm">Verify your blood sugar test result here</h4>
                </div>
                <form onSubmit={handleSubmit}>
                    <div className="mb-4">
                        <label htmlFor="imageUpload" className="block text-sm font-medium text-gray-700">Upload an Image</label>
                        <input type="file" id="imageUpload" onChange={handleImageChange} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" />
                    </div>
                    <button type="submit" className="w-full bg-blue-500 text-white py-2 rounded-md shadow-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50" disabled={loading || !image}>
                        {loading ? 'Processing...' : 'Upload and Convert'}
                    </button>
                </form>
                {error && <div className="mt-4 text-red-500">{error}</div>}
                {renderData()}
                {data && (
                    <div className="mt-4 flex flex-col space-y-2">
                        <button onClick={handleDownloadPDF} className="w-full bg-green-500 text-white py-2 rounded-md shadow-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50">
                            Download as PDF
                        </button>
                        <button onClick={handleDownloadTextFile} className="w-full bg-yellow-500 text-white py-2 rounded-md shadow-md hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-opacity-50">
                            Download as Text File
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
}

export default App;
